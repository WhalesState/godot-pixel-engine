name: ðŸ“Š Static Checks
on:
  workflow_call:

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-static
  cancel-in-progress: true

jobs:
  static-checks:
    name: Code style, file formatting, and docs
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install APT dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: dos2unix libxml2-utils moreutils

      - name: Install Python dependencies and general setup
        run: |
          pip3 install black==23.3.0 pytest==7.1.2 mypy==0.971
          git config diff.wsErrorHighlight all

      - name: Get changed files
        id: changed-files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            files=$(gh pr diff ${{ github.event.pull_request.number }} --name-only)
          elif [ "${{ github.event_name }}" == "push" -a "${{ github.event.forced }}" == "false" -a "${{ github.event.created }}" == "false" ]; then
            files=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.before }}..${{ github.event.after }} 2> /dev/null || true)
          fi
          echo "$files" >> changed.txt
          cat changed.txt
          files=$(echo "$files" | grep -v 'thirdparty' | xargs -I {} sh -c 'echo "./{}"' | tr '\n' ' ')
          echo "CHANGED_FILES=$files" >> $GITHUB_ENV

      # This needs to happen before Python execution; it must happen before any extra files are written.
      - name: .gitignore checks (gitignore_check.sh)
        run: |
          bash ./misc/scripts/gitignore_check.sh

      - name: File formatting checks (file_format.sh)
        run: |
          bash ./misc/scripts/file_format.sh changed.txt

      - name: Header guards formatting checks (header_guards.sh)
        run: |
          bash ./misc/scripts/header_guards.sh changed.txt

      - name: Python style checks via black (black_format.sh)
        run: |
          if grep -qE '\.py$|SConstruct|SCsub' changed.txt || [ -z "$(cat changed.txt)" ]; then
            bash ./misc/scripts/black_format.sh
          else
            echo "Skipping Python formatting as no Python files were changed."
          fi

      - name: Python scripts static analysis (mypy_check.sh)
        run: |
          if grep -qE '\.py$|SConstruct|SCsub' changed.txt || [ -z "$(cat changed.txt)" ]; then
            bash ./misc/scripts/mypy_check.sh
          else
            echo "Skipping Python static analysis as no Python files were changed."
          fi

      - name: Python builders checks via pytest (pytest_builders.sh)
        run: |
          bash ./misc/scripts/pytest_builders.sh

      - name: Class reference schema checks
        run: |
          xmllint --noout --schema doc/class.xsd doc/classes/*.xml modules/*/doc_classes/*.xml platform/*/doc_classes/*.xml

      # - name: Documentation checks
      #   run: |
      #     doc/tools/make_rst.py --dry-run --color doc/classes modules platform

      - name: Style checks via clang-format (clang_format.sh)
        run: |
          clang-format --version
          bash ./misc/scripts/clang_format.sh changed.txt

      - name: Spell checks via codespell
        if: github.event_name == 'pull_request' && env.CHANGED_FILES != ''
        uses: codespell-project/actions-codespell@v2
        with:
          skip: "./bin,./thirdparty,*.desktop,*.gen.*,*.po,*.pot,*.rc,./AUTHORS.md,./COPYRIGHT.txt,./DONORS.md,./core/input/gamecontrollerdb.txt,./core/string/locales.h,./misc/scripts/codespell.sh"
          ignore_words_list: "breaked,curvelinear,doubleclick,expct,findn,gird,hel,inout,lod,mis,nd,numer,ot,requestor,te,vai"
          path: ${{ env.CHANGED_FILES }}
